pipeline{

	parameters{
		choice(name: "choiceTest", choices: ["aaa", "bbb", "CcC"], description: "選択肢テスト")
		string(name: "stringTest", defaultValue: "none", description: "文字列テスト")
		booleanParam(name: "boolTest", defaultValue: false, description: "フラグテスト")
		string(name: "funcEcho", defaultValue: "func arg default", description: "関数に渡す文字列")
	}
	agent{
		label "master"
	}
	stages{
		stage("clear ws"){
			cleanWs
		}
		stage("disp test"){
			steps{
				sh "pwd"
				echo "hello world"
			}
			post{
				always{
					echo "========always========"
				}
				success{
					echo "========A executed successfully========"
				}
				failure{
					echo "========A execution failed========"
				}
			}
		}
		stage("get latest"){
			steps{
				git 'https://github.com/j-sato-t/jenkins_test.git'
			}
		}
		stage("node test"){
			steps{
				sh "node -v"
				sh "npm -v"
			}
		}
		stage("node script"){
			steps{
				sh "node node_tester.js"
			}
		}
		stage("param test"){
			steps{
				echo "choice : ${params.choiceTest}"
				echo "string : ${params.stringTest}"
				echo "bool   : ${params.boolTest}"
			}
		}
		stage("outer execute"){
			steps{
				script{
					def outer = load 'outerfunc.groovy'
					outer.outerTest("${params.funcEcho}")
				}
			}
		}
		stage("hold items"){
			steps{
				// sh 'echo "target data" > target.dat'
				// archiveArtifacts 'target.dat'
				sh 'mkdir artifacts'
				sh 'echo "target data" > artifacts/target.txt'
				script{
					new AntBuilder().zip(destfile: "artifact.zip", basedir: "artifacts");
				}
				archiveArtifacts 'artifact.zip'
			}
		}
	}
	post{
		success{
			echo "========pipeline executed successfully ========"
		}
		failure{
			echo "========pipeline execution failed========"
		}
		always{
			echo "========always========"
		}
	}
}